from Fits import *
from CompassLoader import *
import sys
from matplotlib import rc
rc("text", usetex=True)
plt.rcParams['font.family'] = 'serif'
plt.rcParams['font.size'] = 16
plt.rcParams['lines.linewidth'] = 2.5
plt.rcParams['figure.figsize'] = (8, 5)
np.set_printoptions(threshold=sys.maxsize)

# Code used to study the linearity of MARS' channels

### CODE ###
data = CompassLoader(r"C:\Users\Lucas Garrido\Documents\PhD\Measurements\PHA_test\Lineal\HcompassF_run_2_20220329.root")
amplitudes = [600,800,1200,1800,2500,3200,4000,5000] # LSB
x = np.linspace(600,5000,1000)
peaks_ch0, _ = find_peaks(data[1,:,0], prominence=300)
peaks_ch1, _ = find_peaks(data[1,:,1], prominence=300)
peaks_ch2, _ = find_peaks(data[1,:,2], prominence=300)
peaks_ch3, _ = find_peaks(data[1,:,3], prominence=300)
peaks_ch4, _ = find_peaks(data[1,:,4], prominence=300)
peaks_ch5, _ = find_peaks(data[1,:,5], prominence=300)
peaks_ch6, _ = find_peaks(data[1,:,6], prominence=300)
peaks_ch7, _ = find_peaks(data[1,:,7], prominence=300)
peaks_ch8, _ = find_peaks(data[1,:,8], prominence=300)
peaks_ch9, _ = find_peaks(data[1,:,9], prominence=300)
peaks_ch10, _ = find_peaks(data[1,:,10], prominence=300)
peaks_ch11, _ = find_peaks(data[1,:,11], prominence=300)
peaks_ch12, _ = find_peaks(data[1,:,12], prominence=300)
peaks_ch13, _ = find_peaks(data[1,:,13], prominence=300)
peaks_ch14, _ = find_peaks(data[1,:,14], prominence=300)
peaks_ch15, _ = find_peaks(data[1,:,15], prominence=300)
fit_0 = Linear_fit(amplitudes, data[0,:,0][peaks_ch0])
fit_1 = Linear_fit(amplitudes, data[0,:,1][peaks_ch1])
fit_2 = Linear_fit(amplitudes, data[0,:,2][peaks_ch2])
fit_3 = Linear_fit(amplitudes, data[0,:,3][peaks_ch3])
fit_4 = Linear_fit(amplitudes, data[0,:,4][peaks_ch4])
fit_5 = Linear_fit(amplitudes, data[0,:,5][peaks_ch5])
fit_6 = Linear_fit(amplitudes, data[0,:,6][peaks_ch6])
fit_7 = Linear_fit(amplitudes, data[0,:,7][peaks_ch7])
fit_8 = Linear_fit(amplitudes, data[0,:,8][peaks_ch8])
fit_9 = Linear_fit(amplitudes, data[0,:,9][peaks_ch9])
fit_10 = Linear_fit(amplitudes, data[0,:,10][peaks_ch10])
fit_11 = Linear_fit(amplitudes, data[0,:,11][peaks_ch11])
fit_12 = Linear_fit(amplitudes, data[0,:,12][peaks_ch12])
fit_13 = Linear_fit(amplitudes, data[0,:,13][peaks_ch13])
fit_14 = Linear_fit(amplitudes, data[0,:,14][peaks_ch14])
fit_15 = Linear_fit(amplitudes, data[0,:,15][peaks_ch15])

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,0], data[1,:,0], color="tab:blue")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,0][peaks_ch0], "kx")
ax[1].plot(x, Linear(x,fit_0.get("slope"),fit_0.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_0.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_0.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_0.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 0")

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,1], data[1,:,1], color="tab:blue")
# ax[0].plot(data[0,:,1][peaks_ch1], data[1,:,1][peaks_ch1], "kx")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,1][peaks_ch1], "kx")
ax[1].plot(x, Linear(x,fit_1.get("slope"),fit_1.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_1.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_1.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_1.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 1")

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,2], data[1,:,2], color="tab:blue")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,2][peaks_ch2], "kx")
ax[1].plot(x, Linear(x,fit_2.get("slope"),fit_2.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_2.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_2.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_2.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 2")

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,3], data[1,:,3], color="tab:blue")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,3][peaks_ch3], "kx")
ax[1].plot(x, Linear(x,fit_3.get("slope"),fit_3.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_3.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_3.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_3.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 3")

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,4], data[1,:,4], color="tab:blue")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,4][peaks_ch4], "kx")
ax[1].plot(x, Linear(x,fit_4.get("slope"),fit_4.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_4.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_4.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_4.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 4")

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,5], data[1,:,5], color="tab:blue")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,5][peaks_ch5], "kx")
ax[1].plot(x, Linear(x,fit_5.get("slope"),fit_5.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_5.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_5.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_5.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 5")

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,6], data[1,:,6], color="tab:blue")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,3][peaks_ch6], "kx")
ax[1].plot(x, Linear(x,fit_6.get("slope"),fit_6.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_6.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_6.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_6.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 6")

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,7], data[1,:,7], color="tab:blue")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,7][peaks_ch7], "kx")
ax[1].plot(x, Linear(x,fit_7.get("slope"),fit_7.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_7.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_7.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_7.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 7")

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,8], data[1,:,8], color="tab:blue")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,8][peaks_ch8], "kx")
ax[1].plot(x, Linear(x,fit_8.get("slope"),fit_8.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_8.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_8.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_8.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 8")

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,9], data[1,:,9], color="tab:blue")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,9][peaks_ch9], "kx")
ax[1].plot(x, Linear(x,fit_9.get("slope"),fit_9.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_9.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_9.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_9.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 9")

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,10], data[1,:,10], color="tab:blue")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,10][peaks_ch10], "kx")
ax[1].plot(x, Linear(x,fit_10.get("slope"),fit_10.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_10.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_10.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_10.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 10")

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,11], data[1,:,11], color="tab:blue")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,11][peaks_ch11], "kx")
ax[1].plot(x, Linear(x,fit_11.get("slope"),fit_11.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_11.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_11.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_11.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 11")

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,12], data[1,:,12], color="tab:blue")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,12][peaks_ch12], "kx")
ax[1].plot(x, Linear(x,fit_12.get("slope"),fit_12.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_12.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_12.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_12.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 12")

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,13], data[1,:,13], color="tab:blue")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,13][peaks_ch13], "kx")
ax[1].plot(x, Linear(x,fit_13.get("slope"),fit_13.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_13.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_13.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_13.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 13")

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,14], data[1,:,14], color="tab:blue")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,14][peaks_ch14], "kx")
ax[1].plot(x, Linear(x,fit_14.get("slope"),fit_14.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_14.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_14.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_14.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 14")

f, ax = plt.subplots(2,1, figsize=(10,8))
ax[0].step(data[0,:,15], data[1,:,15], color="tab:blue")
ax[0].set_ylim(0)
ax[0].set_xlim(0,16384)
ax[0].set_xlabel("ADC Channel")
ax[0].set_ylabel("Counts")
ax[1].plot(amplitudes, data[0,:,15][peaks_ch15], "kx")
ax[1].plot(x, Linear(x,fit_15.get("slope"),fit_15.get("intercept")), "r--", zorder=1)
ax[1].text(600,3500,"m = " + str(fit_15.get("slope")))
ax[1].text(600,3100,"n = " + str(fit_15.get("intercept")))
ax[1].text(600,2700,"$r^2$ = " + str(fit_15.get("r_squared")))
ax[1].set_xlabel("Amplitude (LSB)")
ax[1].set_ylabel("ADC Channel")
plt.suptitle("Channel 15")
plt.show()